generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  slug        String   @id
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  permissions RolePermission[]
  users       UserRole[]
}

model Permission {
  slug        String   @id
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  roles RolePermission[]
}

model RolePermission {
  roleSlug       String
  role           Role       @relation(fields: [roleSlug], references: [slug])
  permissionSlug String
  permission     Permission @relation(fields: [permissionSlug], references: [slug])
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @default(now()) @updatedAt

  @@id([roleSlug, permissionSlug])
}

model User {
  id          String   @id @default(uuid())
  name        String
  phoneNumber String   @unique
  birthDate   DateTime
  password    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  meetings MeetingMember[]
  tokens   UserToken[]
  roles    UserRole[]
}

model UserRole {
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  roleSlug  String
  role      Role     @relation(fields: [roleSlug], references: [slug])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([userId, roleSlug])
}

model UserToken {
  token     String   @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([token, userId])
}

model Office {
  slug         String   @id
  name         String
  description  String?
  isIndividual Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  meetingMembers MeetingMember[]
}

model MeetingMember {
  memberId   String
  member     User     @relation(fields: [memberId], references: [id])
  meetingId  String
  meeting    Meeting  @relation(fields: [meetingId], references: [id])
  officeSlug String
  office     Office   @relation(fields: [officeSlug], references: [slug])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@id([memberId, meetingId])
}

model Meeting {
  id          String   @id @default(uuid())
  description String?
  startAt     DateTime
  endAt       DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  members MeetingMember[]
}
